package org.occurrent.eventstore.jpa.utils;

import com.zaxxer.hikari.HikariConfig;
import com.zaxxer.hikari.HikariDataSource;
import jakarta.persistence.EntityManager;
import javax.sql.DataSource;
import org.testcontainers.containers.PostgreSQLContainer;

public class TestDb {

  public static final PostgreSQLContainer<?> postgres;
  static final String USER_NAME = "user";
  static final String PASSWORD = "password";
  static final String DB = "db";

  static {
    postgres =
        new PostgreSQLContainer<>("postgres:15-alpine")
            .withUsername(USER_NAME)
            .withPassword(PASSWORD)
            .withDatabaseName(DB);
    //    List<String> ports = new ArrayList<>();
    //    ports.add("27017:27017");
    //    mongoDBContainer.withReuse(true).setPortBindings(ports);

    postgres.start();
  }

  public static DataSource dataSource(){
    var dcn = "org.postgresql.Driver";
    var jdbcUrl =  String.format(
            "jdbc:postgresql://%s:%s/%s?stringtype=unspecified",
            postgres.getHost(), postgres.getFirstMappedPort(), DB);
    HikariConfig dataSourceProperties = new HikariConfig();
    dataSourceProperties.setDriverClassName(dcn);
    dataSourceProperties.setJdbcUrl(jdbcUrl);
    dataSourceProperties.setUsername(USER_NAME);
    dataSourceProperties.setPassword(PASSWORD);
    return new HikariDataSource(dataSourceProperties);
  }

  static final String initTablesSql =
      """
      CREATE TABLE "public"."cloud_events" (
          "id" BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
          "stream_revision" BIGINT NOT NULL,
          "stream_id" TEXT NOT NULL,
          "event_uuid" UUID NOT NULL UNIQUE,
          "source" TEXT NOT NULL,
          "type" TEXT NOT NULL,
          "timestamp" TIMESTAMPTZ NOT NULL DEFAULT NOW(),
          "subject" text,
          "data_content_type" text,
          "data" text,
          "data_schema" text,
          "spec_version" text,
          CONSTRAINT "cloud-events-pk" PRIMARY KEY ("id")
      );
      """;

  public static void initializeTables(EntityManager em) {
    initInternal(em);
  }

  static boolean initComplete = false;

  static synchronized void initInternal(EntityManager em) {
    if (initComplete) {
      return;
    }
    em.createNativeQuery(initTablesSql).executeUpdate();
    initComplete = true;
  }
}
